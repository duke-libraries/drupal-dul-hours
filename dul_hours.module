<?php
require_once DRUPAL_ROOT . '/sites/all/libraries/gapi/apiClient.php';
require_once DRUPAL_ROOT . '/sites/all/libraries/gapi/contrib/apiCalendarService.php';

/**
 * Implements hook_menu()
 */
function dul_hours_menu() {
	$items['admin/config/library_hours'] = array(
		'title'		=> 'Library Hours',
		'description'	=> 'Adjust Library Hours display settings',
		'position' => 'right',
		'weight'	=> 5,
		'page callback'	=> 'system_admin_menu_block_page',
		'access arguments'	=> array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);
	$items['admin/config/library_hours/settings'] = array(
		'title' => 'Settings',
		'description' => 'Change settings for the Library Hours display',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'dul_hours.admin.inc',
	);
	$items['admin/config/library_hours/library'] = array(
		'title' => 'Libraries',
		'description' => 'Manage the Library mappings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_admin_library_default'),
		'access arguments' => array('administer site configuration'),
		'file' => 'dul_hours.admin.inc',
		'type' => MENU_NORMAL_ITEM,
	);
	$items['admin/config/library_hours/library/add'] = array(
		'title' => 'Add Library',
		'description' => t('Add a library-to-Google Calendar mapping'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_admin_library_add_form'),
		'access arguments' => array('administer site configuration'),
		'file' => 'dul_hours.admin.inc',
		'type' => MENU_LOCAL_TASK,
	);
	$items['admin/config/library_hours/library/edit/%dul_hours_library'] = array(
		'title callback' => array('dul_hours_library_get_title'),
		'title arguments' => array(5),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_edit_library', 5),
		'access arguments' => array('administer site configuration'),
		'file' => 'dul_hours.admin.inc',
	);
	// about hours page
	$items['about/hours'] = array(
		'title' => 'Library Hours',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_table_page'),
		'file' => 'dul_hours.pages.inc',
		'access callback' => TRUE,
	);
	$items['about/hours/%dul_hours_library'] = array(
		'title callback' => 'dul_hours_calendar_title',
		'title arguments' => array(2),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_calendar_page', 2),
		'access callback' => TRUE,
		'file' => 'dul_hours.pages.inc',
	);
	// UNCOMMENT THIS BLOCK and COMMENT OUT the 8 lines above this line.
	#$items['about/hours/%dul_hours_library'] = array(
	#	'title callback' => 'dul_hours_calendar_title',	// a function that provides a dynamic title for the page
	#	'title arguments' => array(2),
	#	'page callback' => 'dul_hours_calendar_google',
	#	'page arguments' => array(2),
	#	'access callback' => TRUE,
	#	'file' => 'dul_hours.pages.inc',
	#);
	return $items;
}

/**
 * Implements hook_theme()
 */
function dul_hours_theme($existing, $type, $theme, $path) {
	return array(
		'hours_block' => array(
			'variables' => array(
				'items' => NULL, 
				'public_items' => NULL, 
				'library_id' => NULL,
				'bottomlink_title' => FALSE,
				'bottomlink_url' => FALSE,
			),
		),
		'hours_block_day' => array(
			'variables' => array('item' => NULL, 'public_item' => NULL),
			'template' => 'hours_block_day',
		),
		'library_calendar' => array(
			'variables' => array('weeks' => NULL, 'library' => NULL),
			'file' => 'dul_hours.pages.inc',
		),
		'override_admin_library_default_form' => array(
			'render element' => 'form',
			'template' => 'form--admin_library_default',
			'path' => $path . '/templates',
		),
		'affiliate_hours' => array(
			'template' => 'affiliate_hours',
		),
		
		// NEW THEME definition to support the google calendar widget implementation
		'google-calendar' => array(
			// this means a file named 'google-calendar.tpl.php 
			// will be used if no other implementation exists
			'template' => 'google-calender',	
			'path' => $path . '/templates',
			
			// This tells the Drupal rendering engine what variables to pass to the template 	
			'variables' => array(
				'google-cal-id' => NULL,
			), 
		),
	);
}

/**
 * Implements hook_permission()
 */
function dul_hours_permission() {
	return array(
		'administer hours' => array(
			'title' => t('Administer Library Hours'),
			'description' => t('Perform administrative tasks for the Library Hours interface.'),
		),
	);
}

/**
 * Implements hook_cron()
 * - purge old hours entries

 * - fetch hours from Google feed for specific library calendar ID
 * - store in hours database
 */
function dul_hours_cron() {
}

/**
 * Implements hook_block_info()
 *
 * exposes the following block(s):
 * 	- single_day
 *	- upcoming days
 */
function dul_hours_block_info() {
	/*
	$blocks['single_day'] = array(
		'info'				=> t('Hours for Single Day'),
		'cache'				=> DRUPAL_CACHE_PER_USER,
		'visibility'	=> 0,
	);
	$blocks['upcoming_days'] = array(
		'info'				=> t('Hours for Upcoming Days'),
		'cache'				=> DRUPAL_CACHE_PER_USER,
		'visibility'	=> 0,
	);
	*/
	$dul_hours_cal_blocks = variable_get('dul_hours.upcoming_days_block', array());
	foreach ($dul_hours_cal_blocks as $library_id) {
		$blocks['upcoming_days-' . $library_id] = array(
			'info' => t('Hours for Upcoming Days (' . $library_id . ')'),
			'cache' => DRUPAL_CACHE_GLOBAL,
		);
		$blocks['single_day-' . $library_id] = array(
			'info'				=> t('Hours for Single Day (' . $library_id . ')'),
			'cache'				=> DRUPAL_CACHE_GLOBAL,
		);
	}
	return $blocks;
}

/**
 * Implements hook_block_configure()
 */
function dul_hours_block_configure($delta) {
	$form = array();

	$delta_parts = explode('-', $delta);
	$library_id = isset($delta_parts[1]) ? $delta_parts[1] : '';
	
	switch ($delta_parts[0]) {
		case 'upcoming_days':
			$libraries = dul_hours_get_libraries(TRUE);	// exclude PUBLIC library hours
			$library_options = array();
			foreach ($libraries as $library) {
				$library_options[$library->library_id] = $library->library_name;
			}
			$form['dul_hours_block'] = array(
				'#type' => 'fieldset',
				'#title' => t('Hours Block Settings'),
				'#collapsible' => FALSE,
			);
			$form['dul_hours_block']['upcoming_days_library'] = array(
				'#type'					=> 'select',
				'#title'				=> t('Display Hours for this Library'),
				'#options'			=> $library_options,
				//'#default_value'	=> variable_get('upcoming_days_library'),
				'#default_value' => $library_id,
			);
			$form['dul_hours_block']['upcoming_days_display_public'] = array(
				'#type'					=> 'checkbox',
				'#title'				=> t('Display the <strong>Duke Library Public Hours</strong> in this block'),
				'#default_value'=> variable_get('upcoming_days_display_public', 0),
				'#states'				=> array(
					'visible'	=> array(
						':input[name=upcoming_days_library]' => array('value' => t('perkins')),
					),
				),
			);
			$form['dul_hours_block']['upcoming_days_count'] = array(
				'#type'	 				=> 'textfield',
				'#title'				=> t('Configure the number of days to display'),
				'#size'					=> 4,
				'#description'	=> t('Enter the number of days that will appear in the block.'),
				'#default_value'	=> variable_get('upcoming_days_count_' . $library_id, 4),
				'#required' => TRUE,
			);
			$start_options = array(
				'current_day' => t('Current Day'),
				'sunday' => t('Sunday - first day of week'),
				'monday' => t('Monday - first day of work week'),
			);
			$form['dul_hours_block']['upcoming_days_start_date'] = array(
				'#type'					=> 'select',
				'#title'				=> t('First day to display'),
				'#description'	=> t('Determine what day appears first in the block display.'),
				'#options'			=> $start_options,
				'#default_value'	=> variable_get('upcoming_days_start_date_' . $library_id, 'current_day'),
			);
			$form['dul_hours_block']['bottom_link'] = array(
				'#type' => 'fieldset',
				'#collapsible' => TRUE,
				'#collapsed' => FALSE,
				'#title' => t('Bottom Link Title and URL Settings'),
			);
			$form['dul_hours_block']['bottom_link']['bottom_link_title'] = array(
				'#type' => 'textfield',
				'#size' => 50,
				'#description' => t('Text that appears under the hours display -- e.g. <em>"Hours by Month"</em>'),
				'#default_value' => variable_get('upcoming_days_bottomlink_title_' . $library_id, 'Hours by Month'),
			);
			$form['dul_hours_block']['bottom_link']['bottom_link_url'] = array(
				'#type' => 'textfield',
				'#size' => 50,
				'#description' => t('URL for the above title -- e.g. <em>about/hours/perkins</em>'),
				'#default_value' => variable_get('upcoming_days_bottomlink_url_' . $library_id, '/about/hours/' . $library_id),
			);

			break;
			
		case 'variable':
			break;
	}
	return $form;
}

/**
 * Implements hook_block_save()
 */
function dul_hours_block_save($delta = '', $edit = array()) {
	$delta_parts = explode('-', $delta);
	$library_id = isset($delta_parts[1]) ? $delta_parts[1] : '';
	
	switch ($delta_parts[0]) {
		case 'upcoming_days':
			if (!empty($library_id)) {
				variable_set('upcoming_days_count_' . $library_id, (int)$edit['upcoming_days_count']);
				variable_set('upcoming_days_start_date_' . $library_id, $edit['upcoming_days_start_date']);
				variable_set('upcoming_days_bottomlink_url_' . $library_id, $edit['bottom_link_url']);
				variable_set('upcoming_days_bottomlink_title_' . $library_id, $edit['bottom_link_title']);
			}
			
			if ($edit['upcoming_days_library'] == 'perkins') {
				variable_set('upcoming_days_display_public', $edit['upcoming_days_display_public']);
			} else {
				variable_set('upcoming_days_display_public', '0');
			}
			break;
	}

	return;
}

/**
 * Implements hook_block_view()
 * 
 * RT #261591 -- auto-detect server name and return ''
 * 							 when either DEV or PRE is in SERVER_NAME
 * 							 OR -- when HTTP_PROXY value is present
 */
function dul_hours_block_view($delta='') {
	$delta_parts = explode('-', $delta);
	$library_id = '';
	
	if (preg_match('/(pre|dev)/', $_SERVER['SERVER_NAME']) == 1) {
		// will not be able to fetch data from Google due to proxy complictions
		// exit quietly with an empty string
		return array(
			'content' => '<p>Unable to fetch Google Calendar data.</p>',
			'subject' => t('Library Hours'),
		);
	}
	
	switch ($delta_parts[0]) {

	case 'upcoming_days':
		if (count($delta_parts) == 1) {
			$library_id = variable_get('dul_hours.default_library', 'perkins');
			$days_to_fetch = (int) variable_get('upcoming_days_count');
			$upcoming_start_date = variable_get('upcoming_days_start_date', 'current_day');
		} else {
			$library_id = $delta_parts[1];
			$days_to_fetch = (int) variable_get('upcoming_days_count_' . $delta_parts[1]);
			$upcoming_start_date = variable_get('upcoming_days_start_date_' . $delta_parts[1], 'current_day');
		} 
		$library_record = dul_hours_library_load($library_id);
		
		$display_public_hours = variable_get('upcoming_days_display_public');
		switch ($upcoming_start_date) {
			case 'current_day':
				$start_date = time();
				break;

			case 'sunday':
			case 'monday':
				# go back (if need be) and find the most recent "Sunday"
				$start_date = _dul_hours_find_recent($upcoming_start_date);
				break;
		}

		$result = _dul_hours_fetch_hours_events($library_id, $start_date, $days_to_fetch);
		$eventItems = array();
		if (isset($result->items)) {
			foreach($result->items as $item) {
				$eventItems[] = dul_hours_create_hours_record($library_id, $item);
			}
		}

		// create the theme data array
		$theme_data = array('items' => $eventItems, 'library_id' => $library_id);
		$bottomlink_title = variable_get('upcoming_days_bottomlink_title_' . $library_id, FALSE);
		if ($bottomlink_title) {
			$theme_data['bottomlink_title'] = $bottomlink_title;
			$theme_data['bottomlink_url'] = variable_get('upcoming_days_bottomlink_url_' . $library_id, '/about/hours');
		}

		if ($display_public_hours) {
			// fetch the public hours -- need to get the 'public google_calendar_id, first
			$result = _dul_hours_fetch_hours_events('public', $start_date, $days_to_fetch);
			$publicEventItems = array();
			if (isset($result->items)) {
				foreach($result->items as $item) {
					$publicEventItems[] = dul_hours_create_hours_record('public', $item);
				}
			}
			$theme_data['public_items'] = $publicEventItems;
		}
		#$block['content'] = '<h3>' . $library_record->library_name . ' Hours</h3>' . theme('hours_block', $theme_data);
		$block['content'] = theme('hours_block', $theme_data);
		
		// with that library information, fetch the days for display
		
		// $library = variable_get('dul_hours.default_library', 'PERKINS');
		// $library_name = _dul_hours_library_get_attr($library, 'name');
		// $block['subject'] = $library_name . ' Hours';
		// $block['content'] = dul_hours_block_content($delta);
		return $block;
		break;

	};

	return '';
}


/**
 * Default theme implementation for hours_block
 */
function theme_hours_block($vars) {
	if (empty($vars['items'])) {
		return '';
	}
	$library_id = $vars['library_id'];
	
	$output = '<div class="clearfix">';
	if (!empty($vars['public_items'])) {
		for ($i = 0; $i < count($vars['items']); $i++) {
			$output .= theme('hours_block_day', array('item' => $vars['items'][$i], 'public_item' => $vars['public_items'][$i]));
		}
	} else {
		foreach ($vars['items'] as $item) {
			$output .= theme('hours_block_day', array('item' => $item));
		}
	}
	if ($vars['bottomlink_title']) {
		$output .= '<div class="other">' . l(t($vars['bottomlink_title']), $vars['bottomlink_url']) . '&nbsp;&raquo;</div>';	
	} else {
		$output .= '<div class="other"><a href="/about/hours/' . $vars['library_id'] . '">' . t('Hours by Month') . '</a>&nbsp;&raquo;</div>'; 
	}
	$output .= '</div>';
	return $output;
}

function dul_hours_load_libraries($exlude_public = FALSE) {
	return dul_hours_get_libraries($exlude_public);
}
/**
 * Return a list of libraries
 */
function dul_hours_get_libraries($exclude_public = FALSE) {
	$query = db_select('duke_cal_library', 'l')
		->fields('l');

	if ($exclude_public) {
		$query->condition('library_id', 'public', '<>');
	}

	$result = $query->execute();

	$rows = array();
	foreach ($result as $row) {
		$rows[] = $row;
	}
	return $rows;
}

/**
 * Return a single library record
 */
function dul_hours_library_load($lid) {
	$result = db_query('SELECT * FROM {duke_cal_library} WHERE lid = :lid OR library_id = :library_id', array(':lid' => $lid, ':library_id' => $lid));
	$record = $result->fetchObject();
	return $record;
}

/**
 * Return title of Library (specifically for calendar page)
 */
function dul_hours_calendar_title($library) {
	return $library->library_name . ' Hours';
}

/**
 * Return a title for the Library record (admin form purposes)
 */
function dul_hours_library_get_title($library) {
	return sprintf('%s (%s)', $library->library_name, $library->library_id);
}

/**
 * Delete hours events.
 *
 * @see drush_dul_hours_dul_refresh_hours()
 */
function dul_hours_delete_hours($thru, $from_drush = FALSE) {
	if ($thru == NULL) {
		$thru = time();
	}

	if ($from_drush) {
		drush_print("called dul_hours_delete_hours...\n");
	}

	$num_deleted = db_delete('hours')
	->condition('end_date', $thru, '<=')
	->execute();

	return $num_deleted;
}

/**
 * Creates an 'hours' object that can be stored in the database, 
 * or used in block content
 */
function dul_hours_create_hours_record($library, $eventItem, $target_month = NULL) {
	$record = new stdClass();

	//$record->lid = $library->lid;
	if (!isset($eventItem)) {
		return $record;
	}

	if (isset($eventItem->start->dateTime)) {
		$convertedTime = strtotime($eventItem->start->dateTime);
	} else {
		$convertedTime = strtotime($eventItem->start->date);
	}

	$currentDate = getdate();
	$record->isCurrentDay = ((int) date('z', $convertedTime) == (int) $currentDate['yday']);
	$record->libraryDate = array(
		'dayAndDate' => date('D n/j', $convertedTime),
		'shortDay' => date('D', $convertedTime),
		'longDay' => date('l', $convertedTime),
		'dateStr' => date('n/j', $convertedTime),
		'wday' => (int)date('w', $convertedTime),
		'yday' => (int)date('z', $convertedTime),
	);
	$record->timestamp = $convertedTime;

	if (preg_match('/^(lilly|public|rubenstein|perkins|music):/i', $eventItem->summary) == 1) {
		$record->hours = preg_replace('/^(lilly|public|rubenstein|perkins|music): /i', '', $eventItem->summary);
		$record->hours_encoded = str_replace('-', ' &ndash; ', $record->hours);
		$record->allDay = preg_match('/24 hours/i', $record->hours) == 1;
	} elseif (preg_match('/closed/i', $eventItem->summary) == 1) {
		$record->hours = $record->hours_encoded = 'CLOSED';
		$record->allDay = TRUE;
		$record->libraryClosed = TRUE;
	} elseif (isset($eventItem->start->dateTime)) {
		$startDateTime = strtotime($eventItem->start->dateTime);
		$endDateTime = strtotime($eventItem->end->dateTime);
		$record->start = $startDateTime;
		$record->end = $endDateTime;

		if (preg_match('/24 hours/i', $eventItem->summary) == 1) {
			$record->hours = $record->hours_encoded = 'Open 24 hours';
			$record->allDay = TRUE;
		} elseif (date('i', $endDateTime) == '59' && date('D', $endDateTime) == 'Sun') {
			// need to account for the special case when the
			// end time is actually 23:59
			$record->hours = $record->hours_encoded = 'Open at ' . date('ga', $startDateTime);
		} else {
			$_start = date('i', $startDateTime) == '00'
				? date('ga', $startDateTime)
				: date('g:ia', $startDateTime);
			$_end = date('i', $endDateTime) =='00'
				? date('ga', $endDateTime)
				: date('g:ia', $endDateTime);
			$record->hours = sprintf("%s - %s", $_start, $_end);
			$record->hours_encoded = sprintf("%s &ndash; %s", $_start, $_end);
		}
	} else {
		// we have a date (no, not with a girl, but a date string)
		$startDate = strtotime($eventItem->start->date);
		$record->hours = $record->hours_encoded = $eventItem->summary;
	}
	if (!is_null($target_month) && $target_month != '') {
		// if 'target_month' is an array, assume the first element is the month string
		// and assuming the second element is the format string used for the date() function
		if (is_array($target_month)) {
			$record->thisMonth = ($target_month[0] == date($target_month[1], $record->timestamp));
		} else {
			// we'll default to the 'M' format string
			$record->thisMonth = $target_month == date('M', $record->timestamp);
		}
	}
	return $record;
}

/******** PRIVATE FUNCTIONS ***********/
function _dul_hours_fetch_hours_events($library, $start_date, $num_events) {
	$result = db_query('SELECT google_cal_id FROM {duke_cal_library} WHERE library_id = :library',
		array(':library' => $library));
	$record = $result->fetchObject();

	require_once DRUPAL_ROOT . '/sites/all/libraries/gapi/apiClient.php';
	require_once DRUPAL_ROOT . '/sites/all/libraries/gapi/contrib/apiCalendarService.php';
	require_once drupal_get_path('module', 'dul_hours') . '/dul_hours.calendar.inc';

	$service = '';
	try {
		$service = dul_hours_load_calendar_service();
	} catch(Exception $exc) {
		drupal_set_message($exc->getMessage(), 'error');
		return array();
	}

	$events = array();
	try {
		$events = dul_hours_fetch_events($record->google_cal_id, $service, $start_date, $num_events);
	} catch(Exception $fetchException) {
		// send a mail to a revelant listserv.
		// drupal_set_message('fetch_hours_event', 'error');
		// drupal_set_message($fetchException->getMessage(), 'error');
		return $events;
	}
	// dpm($events);
	return $events;
}

