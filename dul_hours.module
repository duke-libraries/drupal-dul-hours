<?php

/**
 * Implements hook_menu()
 */
function dul_hours_menu() {
	$items['admin/config/library_hours'] = array(
		'title'		=> 'Library Hours',
		'description'	=> 'Adjust Library Hours display settings',
		'position' => 'right',
		'weight'	=> 5,
		'page callback'	=> 'system_admin_menu_block_page',
		'access arguments'	=> array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);
	$items['admin/config/library_hours/settings'] = array(
		'title' => 'Settings',
		'description' => 'Change settings for the Library Hours display',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'dul_hours.admin.inc',
	);
	$items['admin/config/library_hours/library'] = array(
		'title' => t('Libraries'),
		'description' => 'Manage the Library mappings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_admin_library_default'),
		'access arguments' => array('administer site configuration'),
		'file' => 'dul_hours.admin.inc',
		'type' => MENU_NORMAL_ITEM,
	);
	$items['admin/config/library_hours/library/add'] = array(
		'title' => 'Add Library',
		'description' => t('Add a library-to-Google Calendar mapping'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_admin_library_add_form'),
		'access arguments' => array('administer site configuration'),
		'file' => 'dul_hours.admin.inc',
		'type' => MENU_LOCAL_TASK,
	);
	$items['admin/config/library_hours/library/edit/%dul_hours_library'] = array(
		'title callback' => array('dul_hours_library_get_title'),
		'title arguments' => array(5),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('dul_hours_admin_edit_library', 5),
		'access arguments' => array('administer site configuration'),
		'file' => 'dul_hours.admin.inc',
	);

	return $items;
}

/**
 * Implements hook_theme()
 */
function dul_hours_theme() {
	'hours_block' => array(),
	'hours_block_day' => array(
		'variables' => array(),
	),
}

/**
 * Implements hook_permission()
 */
function dul_hours_permission() {
}

/**
 * Implements hook_cron()
 * - purge old hours entries

 * - fetch hours from Google feed for specific library calendar ID
 * - store in hours database
 */
function dul_hours_cron() {
}

/**
 * Implements hook_block_info()
 *
 * exposes the following block(s):
 * 	- single_day
 *	- upcoming days
 */
function dul_hours_block_info() {
	$blocks['single_day'] = array(
		'info'				=> t('Hours for Single Day'),
		'cache'				=> DRUPAL_CACHE_PER_USER,
		'visibility'	=> 0,
	);
	$blocks['upcoming_days'] = array(
		'info'				=> t('Hours for Upcoming Days'),
		'cache'				=> DRUPAL_CACHE_PER_USER,
		'visibility'	=> 0,
	);
	return $blocks;
}

/**
 * Implements hook_block_configure()
 */
function dul_hours_block_configure($delta) {
	$form = array();

	switch ($delta) {
	case 'upcoming_days':
		$libraries = dul_hours_get_libraries(TRUE);	// exclude PUBLIC library hours
		$library_options = array();
		foreach ($libraries as $library) {
			$library_options[$library->library_id] = $library->library_name;
		}
		$form['upcoming_days_library'] = array(
			'#type'					=> 'select',
			'#title'				=> t('Display Hours for this Library'),
			'#options'			=> $library_options,
			'#default_value'	=> variable_get('upcoming_days_library'),
		);
		$form['upcoming_days_display_public'] = array(
			'#type'					=> 'checkbox',
			'#title'				=> t('Display the <strong>Duke Library Public Hours</strong> in this block'),
			'#default_value'=> variable_get('upcoming_days_display_public', 0),
			'#states'				=> array(
				'visible'	=> array(
					':input[name=upcoming_days_library]' => array('value' => t('perkins')),
				),
			),
		);
		$form['upcoming_days_count'] = array(
			'#type'	 				=> 'textfield',
			'#title'				=> t('Configure the number of days to display'),
			'#size'					=> 4,
			'#description'	=> t('Enter the number of days that will appear in the block.'),
			'#default_value'	=> variable_get('upcoming_days_count', 4),
		);
		$start_options = array(
			'current_day' => t('Current Day'),
			'sunday' => t('Sunday - first day of week'),
			'monday' => t('Monday - first day of work week'),
		);
		$form['upcoming_days_start_date'] = array(
			'#type'					=> 'select',
			'#title'				=> t('First day to display'),
			'#description'	=> t('Determine what day appears first in the block display.'),
			'#options'			=> $start_options,
			'#default_value'	=> variable_get('upcoming_days_start_date', 'current_day'),
		);
		break;
	}
	return $form;
}

/**
 * Implements hook_block_save()
 */
function dul_hours_block_save($delta = '', $edit = array()) {
	switch ($delta) {
		case 'upcoming_days':
			variable_set('upcoming_days_count', (int)$edit['upcoming_days_count']);
			variable_set('upcoming_days_start_date', $edit['upcoming_days_start_date']);
			if ($edit['upcoming_days_library'] == 'perkins') {
				variable_set('upcoming_days_display_public', $edit['upcoming_days_display_public']);
			} else {
				variable_set('upcoming_days_display_public', '0');
			}
			break;
	}

	return;
}

/**
 * Implements hook_block_view()
 */
function dul_hours_block_view($delta='') {
	switch ($delta) {

	case 'upcoming_days':
		$library = variable_get('dul_hours.default_library', 'perkins');
		$days_to_fetch = (int) variable_get('upcoming_days_count');
		$upcoming_start_date = variable_get('upcoming_days_start_date', 'current_day');
		switch ($upcoming_start_date) {
			case 'current_day':
				$start_date = time();
				break;

			case 'sunday':
			case 'monday':
				# go back (if need be) and find the most recent "Sunday"
				$start_date = _dul_hours_find_recent($upcoming_start_date);
				break;
		}

		$events = _dul_hours_fetch_hours_events($library, $start_date, $days_to_fetch);
		// with that library information, fetch the days for display
		
		// $library = variable_get('dul_hours.default_library', 'PERKINS');
		// $library_name = _dul_hours_library_get_attr($library, 'name');
		// $block['subject'] = $library_name . ' Hours';
		// $block['content'] = dul_hours_block_content($delta);
		// return $block;
		break;

	};

	return '';
}

/**
 * Return a list of libraries
 */
function dul_hours_get_libraries($exclude_public = FALSE) {
	$query = db_select('duke_cal_library', 'l')
		->fields('l');

	if ($exclude_public) {
		$query->condition('library_id', 'public', '<>');
	}

	$result = $query->execute();

	$rows = array();
	foreach ($result as $row) {
		$rows[] = $row;
	}
	return $rows;
}

/**
 * Return a single library record
 */
function dul_hours_library_load($lid) {
	$result = db_query('SELECT * FROM {duke_cal_library} WHERE lid = :lid', array(':lid' => $lid));
	$record = $result->fetchObject();
	dpm($result);
	dpm($record);
	return $record;
}

/**
 * Return a title for the Library record (admin form purposes)
 */
function dul_hours_library_get_title($library) {
	return sprintf('%s (%s)', $library->library_name, $library->library_id);
}

/**
 * Delete hours events.
 *
 * @see drush_dul_hours_dul_refresh_hours()
 */
function dul_hours_delete_hours($thru, $from_drush = FALSE) {
	if ($thru == NULL) {
		$thru = time();
	}

	if ($from_drush) {
		drush_print("called dul_hours_delete_hours...\n");
	}

	$num_deleted = db_delete('hours')
	->condition('end_date', $thru, '<=')
	->execute();

	return $num_deleted;
}

/**
 * Creates an 'hours' object that can be stored in the database, 
 * or used in block content
 */
function dul_hours_create_hours_record($library, $eventItem) {
	$record = new stdClass();

	$record->lid = $library->lid;
	if (!isset($eventItem)) {
		return $record;
	}

	if (isset($eventItem->start->dateTime)) {
		$convertedTime = strtotime($eventItem->start->dateTime);
	} else {
		$convertedTime = strtotime($eventTime->start->date);
	}

	$currentDate = getdate();
	$record->isCurrentDay = ((int) date('z', $convertedTime) == (int) $currentDate['yday']);
	$record->libraryDate = array(
		'dayAndDate' => date('D n/j', $convertedTime),
		'shortDay' => date('D', $convertedTime),
		'longDay' => date('l', $convertedTime),
		'dateStr' => date('n/j', $convertedTime),
		'wday' => (int)date('w', $convertedTime),
		'yday' => (int)date('z', $convertedTime),
	);
	$record->timestamp = $convertedTime;

	if (preg_match('/^(lilly|public|rubenstein|perkins|music):/i', $eventItem->summary) == 1) {
		$record->hours = preg_replace('/^(lilly|public|rubenstein|perkins|music): /i', '', $eventItem->summary);
		$record->hours_encoded = str_replace('-', ' &ndash; ', $record->hours);
		$record->allDay = preg_match('/24 hours/i', $record->hours) == 1;
	} elseif (preg_match('/closed/i', $eventTime->summary) == 1) {
		$record->hours = $record->hours_encoded = 'CLOSED';
		$record->allDay = TRUE;
		$record->libraryClosed = TRUE;
	} elseif (isset($eventItem->start->dateTime)) {
		$startDateTime = strtotime($eventItem->start->dateTime);
		$endDateTime = strtotime($eventItem->end->dateTime);
		$record->start = $startDateTime;
		$record->end = $endDateTime;

		if (preg_match('/24 hours/i', $eventItem->summary) == 1) {
			$record->hours = $record->hours_encoded = 'Open 24 hours';
			$record->allDay = TRUE;
		} elseif (date('i', $endDateTime) == '59' && date('D', $endDateTime) == 'Sun') {
			// need to account for the special case when the
			// end time is actually 23:59
			$record->hours = $record->hours_encoded = 'Open at ' . date('ga', $startDateTime);
		} else {
			$_start = date('i', $startDateTime) == '00'
				? date('ga', $startDateTime)
				: date('g:ia', $startDateTime);
			$_end = date('i', $endDateTime) =='00'
				? date('ga', $endDateTime)
				: date('g:ia', $endDateTime);
			$record->hours = sprintf("%s - %s", $_start, $_end);
			$record->hours_encoded = sprintf("%s &ndash; %s", $_start, $_end);
		}
	} else {
		// we have a date (no, not with a girl, but a date string)
		$startDate = strtotime($eventTime->start->date);
		$record->hours = $record->hours_encoded = $eventItem->summary;
	}
	return $record;
}

/******** PRIVATE FUNCTIONS ***********/
function _dul_hours_fetch_hours_events($library, $start_date = time(), $num_events = 4) {
	$result = db_query('SELECT google_cal_id FROM {duke_cal_library} WHERE library = :library',
		array(':library' => $library));
	$record = $result->fetchObject();

	require_once DRUPAL_ROOT . '/sites/all/libraries/gapi/apiClient.php';
	require_once DRUPAL_ROOT . '/sites/all/libraries/gapi/contrib/apiCalendarService.php';
	require_once drupal_get_path('module', 'dul_hours') . '/dul_hours.calendar.inc';

	$service = '';
	try {
		$service = dul_hours_load_calendar_service();
	} catch(Exception $exc) {
		drupal_set_message($exc->getMessage(), 'error');
		return NULL;
	}

	$events = dul_hours_fetch_events($record->google_cal_id, $service, $start_date, $num_events);
	dpm($events);
	return $events;
}

